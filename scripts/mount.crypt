#!/bin/bash
#==============================================================================
# mount.crypt
#   Copyright (C) W. Michael Putello <mike@flyn.org>, 2004
#   Copyright Â© Jan Engelhardt <jengelh [at] gmx de>, 2005 - 2006
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License as
#   published by the Free Software Foundation; either version 2 of
#   the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   General Public License for more details.
#
#   You should have received a copy of the GNU General Public
#   License along with this program; if not, write to:
#   Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
#   Boston, MA  02110-1301  USA
#
#   -- For details, see the file named "LICENSE.GPL2"
#==============================================================================

# Sanitize environment
export PATH="/bin:/sbin:/usr/bin:/usr/sbin";
export IFS=`echo -en " \t\n"`;

# Commands
LOSETUP=/sbin/losetup
CRYPTSETUP=/sbin/cryptsetup
MOUNT=/bin/mount
FSCK="/sbin/fsck";

OPTIONS=""
FSTYPE="";

USAGE="dev dir [-o options]

  -o options  set the mount options  [ $OPTIONS ]"

_losetup() {
	DEVICE="$1";
	LOOPDEV=0
	while [ "$LOOPDEV" -le 15 ]; do
		if "$LOSETUP" "/dev/loop$LOOPDEV" "$DEVICE" 2>/dev/null; then
			echo "/dev/loop$LOOPDEV";
			return 0
		fi
		LOOPDEV=$[$LOOPDEV+1];
	done
	echo "${0##*/}: error setting up loop device for $DEVICE" >&2
	exit 1
}

DEVICE="$1";
MOUNT_POINT="$2";
shift 2;

while :; do
	case "$1" in
		-h | "-?" )
			echo -e usage: ${0##*/} "$USAGE" >&2
			exit 1 ;;
		-o )
			OPTIONS="$2";
			shift ;;
		-?* )
			echo "${0##*/}: unrecognized option: $1" >&2
			exit 1 ;;
		* )
			break ;;
	esac
	shift
done

if [ -z "$DEVICE" ]; then
	echo "${0##*/}: device to mount not specified" >&2
fi

if [ ! -f "$DEVICE" -a ! -b "$DEVICE" ]; then
        echo "${0##*/}: $DEVICE is not a block device or file" >&2;
	exit 1
fi

if [ ! -d "$MOUNT_POINT" ]; then
        echo "${0##*/}: $MOUNT_POINT is not a directory" >&2;
	exit 1
fi

CIPHER=""
KEYSIZE=""
HASH=""
LOOP=false
DOFSCK=false;
MOUNTOPTIONS=""
OLDIFS="$IFS";
IFS=", ";
for opt in $OPTIONS; do
    KEY=${opt%=*};
    VAL=${opt#*=};
	case "$KEY" in
		cipher )
			CIPHER="$VAL"
			;;
		keysize )
			KEYSIZE="$VAL"
			;;
		hash )
			HASH="$VAL"
			;;
		loop )
			LOOP=true
			;;
                fstype)
                        FSTYPE="$VAL";
                        ;;
                fsck)
                        DOFSCK=true;
                        ;;
		* )
			if [ -z "$MOUNTOPTIONS" ]; then
				MOUNTOPTIONS="$opt"
			else
				MOUNTOPTIONS="$MOUNTOPTIONS,$opt"
			fi
			;;
	esac
done
IFS="$OLDIFS";

if [ "$LOOP" == true ]; then
    DEVICE=`_losetup "$DEVICE"`;
fi

# if loop device, make device mapper name based on file pointed to
case "$DEVICE" in
    /dev/loop*)
        DMDEVICE=` "$LOSETUP" "$DEVICE" 2>/dev/null | sed 's/.*(\(.\+\)).*/\1/'`;
esac;
# if not a loop device or previous command fails use $DEVICE
: ${DMDEVICE:=$DEVICE}

# FIXME: blind replacement of / with _ may be a bad idea.
DMDEVICE=`echo "$DMDEVICE" | sed 's/\//_/g'`;

# Check for LUKS
if "$CRYPTSETUP" isLuks "$DEVICE" 2>/dev/null; then
    LUKS=true;
    "$CRYPTSETUP" luksOpen "$DEVICE" "$DMDEVICE";
else
    LUKS=false;
    "$CRYPTSETUP" -c "${CIPHER:-aes}" -h "${HASH:-ripemd160}" \
      -s ${KEYSIZE:-256} create "$DMDEVICE" "$DEVICE";
fi;

if [ $? -ne 0 ]; then
	echo "${0##*/}: error creating $DMDEVICE" >&2
	[ "$LOOP" == true ] && "$LOSETUP" -d "$DEVICE";
	exit 1
fi

if [ "$DOFSCK" == "true" ]; then
    "$FSCK" -p "/dev/mapper/$DMDEVICE";
    if [ $? -gt 1 ]; then
        echo "${0##*/}: filesystem $DMDEVICE has errors" >&2;
        if [ "$LUKS" == true ]; then
            "$CRYPTSETUP" luksClose "$DMDEVICE";
        else
            "$CRYPTSETUP" remove "$DMDEVICE";
        fi;
        [ "$LOOP" == true ] && "$LOSETUP" -d "$DEVICE";
        exit 1;
    fi;
fi;

# $MOUNT_POINT might not exist as mount can try to read it from /etc/fstab
"$MOUNT" ${FSTYPE:+-t "$FSTYPE"} ${MOUNTOPTIONS:+-o "$MOUNTOPTIONS"} \
 "/dev/mapper/$DMDEVICE" "$MOUNT_POINT";
if [ $? -ne 0 ]; then
    echo "${0##*/}: error mounting $DMDEVICE" >&2;
    if [ "$LUKS" == true ]; then
        "$CRYPTSETUP" luksClose "$DMDEVICE";
    else
        "$CRYPTSETUP" remove "$DMDEVICE";
    fi;
    [ "$LOOP" == true ] && "$LOSETUP" -d "$DEVICE";
    exit 1;
fi;

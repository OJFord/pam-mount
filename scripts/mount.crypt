#!/bin/bash
#==============================================================================
# mount.crypt
#   Copyright © W. Michael Petullo <mike@flyn.org>, 2004
#   Copyright © Jan Engelhardt <jengelh [at] gmx de>, 2005 - 2006
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License as
#   published by the Free Software Foundation; either version 2 of
#   the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   General Public License for more details.
#
#   You should have received a copy of the GNU General Public
#   License along with this program; if not, write to:
#   Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
#   Boston, MA  02110-1301  USA
#
#   -- For details, see the file named "LICENSE.GPL2"
#==============================================================================

# Sanitize environment
export PATH="/sbin:/bin:/usr/sbin:/usr/bin";
export IFS=`echo -en " \t\n"`;

OPTIONS=""
FSTYPE="";

USAGE="dev dir [-o options]

  -o options  set the mount options  [ $OPTIONS ]"

function _losetup()
{
	local DEVICE;
	local LOOPDEV;

	DEVICE="$1";
	LOOPDEV=0
	while [ "$LOOPDEV" -le 15 ]; do
		if losetup "/dev/loop$LOOPDEV" "$DEVICE" 2>/dev/null; then
			echo "/dev/loop$LOOPDEV";
			return 0
		fi
		LOOPDEV=$[$LOOPDEV+1];
	done
	echo "${0##*/}: error setting up loop device for $DEVICE" >&2
	exit 1
}

DEVICE="$1";
MOUNT_POINT="$2";
shift 2;

while :; do
	case "$1" in
		(-h|"-?")
			echo -e usage: ${0##*/} "$USAGE" >&2
			exit 1 ;;
		(-o)
			OPTIONS="$2";
			shift ;;
		(-?*)
			echo "${0##*/}: unrecognized option: $1" >&2
			exit 1 ;;
		(*)
			break ;;
	esac
	shift
done

if [ -z "$DEVICE" ]; then
	echo "${0##*/}: device to mount not specified" >&2
	exit 1;
fi

if [ ! -f "$DEVICE" -a ! -b "$DEVICE" ]; then
	echo "${0##*/}: $DEVICE is neither a block device nor file" >&2;
	exit 1
fi

if [ ! -d "$MOUNT_POINT" ]; then
        echo "${0##*/}: $MOUNT_POINT is not a directory" >&2;
	exit 1
fi

CIPHER=""
KEYSIZE=""
keyfile="";
HASH=""
luks_ro="";
LOOP=false
DOFSCK=false;
MOUNTOPTIONS=""
OLDIFS="$IFS";
IFS=", ";

for opt in $OPTIONS; do
	KEY="${opt%%=*}";
	VAL="${opt#*=}";
	case "$KEY" in
		(cipher)  CIPHER="$VAL";;
		(keysize) KEYSIZE="$VAL";;
		(hash)    HASH="$VAL";;
		(fstype)  FSTYPE="$VAL";;
		(fsck)    DOFSCK="true";;
		(keyfile)
			keyfile="$VAL";;
		(loop)
			if ! losetup "$DEVICE" &>/dev/null; then
				LOOP="true";
			fi;
			;;
		(*)
			if [ "$opt" == "ro" ]; then
				luks_ro="--readonly";
			elif [ "$opt" == "rw" ]; then
				luks_ro="";
			fi;
			if [ -z "$MOUNTOPTIONS" ]; then
				MOUNTOPTIONS="$opt"
			else
				MOUNTOPTIONS="$MOUNTOPTIONS,$opt"
			fi
			;;
	esac
done
IFS="$OLDIFS";

if [ "$LOOP" == true ]; then
	DEVICE=`_losetup "$DEVICE"`;
fi

# if loop device, make device mapper name based on file pointed to
case "$DEVICE" in
    /dev/loop*)
	DMDEVICE=`losetup "$DEVICE" 2>/dev/null | sed 's/.*(\(.\+\)).*/\1/'`;
esac;
# if not a loop device or previous command fails use $DEVICE
: ${DMDEVICE:=$DEVICE}

# FIXME: blind replacement of / with _ may be a bad idea.
DMDEVICE=`echo "$DMDEVICE" | sed 's/\//_/g'`;

# Check for LUKS
if cryptsetup isLuks "$DEVICE" 2>/dev/null; then
	LUKS=true;
	if [ -z "$keyfile" ]; then
		cryptsetup luksOpen $luks_ro "$DEVICE" "$DMDEVICE";
	else
		cryptsetup luksOpen $luks_ro -d "$keyfile" "$DEVICE" "$DMDEVICE";
	fi;
else
	LUKS=false;
	cryptsetup -c "${CIPHER:-aes}" -h "${HASH:-ripemd160}" \
		-s ${KEYSIZE:-256} create "$DMDEVICE" "$DEVICE";
fi;

if [ $? -ne 0 ]; then
	echo "${0##*/}: error creating $DMDEVICE" >&2
	[ "$LOOP" == true ] && losetup -d "$DEVICE";
	exit 1
fi

if [ "$DOFSCK" == "true" ]; then
	fsck -p "/dev/mapper/$DMDEVICE";
	if [ $? -gt 1 ]; then
		echo "${0##*/}: filesystem $DMDEVICE has errors" >&2;
		if [ "$LUKS" == true ]; then
			cryptsetup luksClose "$DMDEVICE";
		else
			cryptsetup remove "$DMDEVICE";
		fi;
		[ "$LOOP" == true ] && losetup -d "$DEVICE";
		exit 1;
	fi;
fi;

# $MOUNT_POINT might not exist as mount can try to read it from /etc/fstab
mount ${FSTYPE:+-t "$FSTYPE"} ${MOUNTOPTIONS:+-o "$MOUNTOPTIONS"} \
	"/dev/mapper/$DMDEVICE" "$MOUNT_POINT";

if [ $? -ne 0 ]; then
	echo "${0##*/}: error mounting $DMDEVICE" >&2;
	if [ "$LUKS" == true ]; then
		cryptsetup luksClose "$DMDEVICE";
	else
		cryptsetup remove "$DMDEVICE";
	fi;
	[ "$LOOP" == true ] && losetup -d "$DEVICE";
	exit 1;
fi;
